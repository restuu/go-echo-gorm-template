// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"github.com/google/wire"
	"go-echo-gorm-tempate/adapter/config"
	"go-echo-gorm-tempate/app/author"
	"go-echo-gorm-tempate/app/book"
)

// Injectors from wire.go:

func Init(ctx context.Context) (*App, error) {
	configConfig, err := config.NewConfig()
	if err != nil {
		return nil, err
	}
	db, err := newDB(ctx, configConfig)
	if err != nil {
		return nil, err
	}
	authorRepository := author.NewAuthorRepository(db)
	authorUsecase := author.NewAuthorUsecase(authorRepository)
	bookRepository := book.NewBookRepository(db)
	bookUsecase := book.NewBookUsecase(bookRepository)
	usecases := Usecases{
		AuthorService: authorUsecase,
		BookService:   bookUsecase,
	}
	app := &App{
		Usecases: usecases,
		Config:   configConfig,
		Context:  ctx,
	}
	return app, nil
}

// wire.go:

var (
	usecasesProvider = wire.NewSet(author.NewAuthorUsecase, book.NewBookUsecase, wire.Struct(new(Usecases), "*"))
)
